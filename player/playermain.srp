# playerdemo.srp - example of a bare-bones player
#
# Roger B. Dannenberg
# March 2017

# IMPORTANT: SERVICE must be defined before you load playerbase.srp:
SERVICE = "demo"

# Now load playerbase.srp
require "playerbase"

require "debug"
require "wxserpent"
require "sched"
require "midi-io"
require "prefs"
require "mididevice"
require "slider"

require "prob"
require "mfread"
require "../transition_matrix"

val1 = -1
val2 = -1
weight1 = 0.5 # float ranging from 0 to 1. gray slider in the bottom middle.
weight2 = 1 - weight1
octaveshift = 4 # this is an int ranging from 0 to 9 determined by the touchosc slider. Left slider in the middle 4


///////////////////////////////////
//Touch osc code
///////////////////////////////////

APPLICATION = "p5"
SERVICE = "p5"
PORT = 8213

# make a full path with SERVICE prefix
def full(osc_path)
    # make a full O2 path based on SERVICE
    return "/" + SERVICE + osc_path

o2_initialize(APPLICATION, false)
o2_service_new(SERVICE)
o2_clock_set()


def install_handlers()
    o2_method_new(full("/2/multitoggle1/4/1"), "f", 'button1', true)
    o2_method_new(full("/2/multitoggle1/3/1"), "f", 'button2', true)
    o2_method_new(full("/2/multitoggle1/2/1"), "f", 'button3', true)
    o2_method_new(full("/2/multitoggle2/4/1"), "f", 'button4', true)
    o2_method_new(full("/2/multitoggle2/3/1"), "f", 'button5', true)
    o2_method_new(full("/2/multitoggle2/2/1"), "f", 'button6', true)
    o2_method_new(full("/faderM"), "f", 'weightslider', true)
    o2_method_new(full("/multifaderM/1"), "f", 'octaveslider', true)


# o2_initialize("o2osc", t)
# o2_osc_delegate("oscsend", "192.168.1.122", 8213, false)
# o2_send_start()
# o2_send_finish(0.0, "/oscsend/label hello", false)

def button1(timestamp, address, types, val) 
    val1 = 0
    print val1
def button2(timestamp, address, types, val) 
    val1 = 1
    print val1
def button3(timestamp, address, types, val) 
    val1 = 2
    print val1
def button4(timestamp, address, types, val) 
    val2 = 0
    print val2
def button5(timestamp, address, types, val) 
    val2 = 1
    print val2
def button6(timestamp, address, types, val) 
    val2 = 2
    print val2
def weightslider(timestamp, address, types, val)
    weight1 = val
    print weight1
def octaveslider(timestamp, address, types, val)
    octaveshift = int(val*9)
    print octave



if len(command_line_arguments) > 1 and
   command_line_arguments[1] == "d" // set up for donttouchosc
    install_donttouchosc_handlers()
else
    if len(command_line_arguments) > 1 and
       isdigit(command_line_arguments[1])
        osc_port = int(command_line_arguments[1])
    install_handlers()


rslt = o2_osc_port_new(SERVICE, PORT, false)
if rslt != 0 // an error occurred
    display "in int.srp, o2_osc_port_new returned ERROR", rslt



///////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////
// Markov Stuff
///////////////////////////////////////////////////////////////////

# Associated names of transition matrices
TM_NAMES = ["Game", "Classical", "Rock"]

# Populated with actual transition matrices
TM_LIST = []

# Loading of precomputed transition matrices
for type_name in TM_NAMES:
    var tm_file_path = wxs_file_selector("Open a Transition Matrix for " + type_name,
                             "", "", ".csv", "*.csv", WXS_FILE_OPEN, 0)
    var tmp_tm = TransitionMatrix()
    tmp_tm.read(tm_file_path)
    TM_LIST.append(tmp_tm)

def get_current_tm():
    if (val1 == -1 and val2 == -1)
        return nil
    # TODO: Use states updated from TouchOSC
    # There are one or two styles selected by user in TouchOSC
    # If one, just return the matrix for that style
    if (val1 != -1 and val2 == -1)
        return TM_LIST[val1]
    elif (val1 == -1 and val2 != -1)
        return TM_LIST[val2]
    # If two, use tm1.combine(tm2, CURR_WEIGHT) where CURR_WEIGHT comes from TouchOSC too
    else
        return tm1.combine(tm2, weight1)
    # Return the value of that
    # return TM_LIST[0]

print "Loaded transition matrices!"

// some simple music generation: Here are some problems with this:
// - not very interesting
// - no manual control of anything
// - does everything: bass, chord, melody, instead of one thing
// - all piano sounds
// - cannot handle cur_beats_per_measure properly (assumes 4)
// - plays absurdly fast at faster tempos
//
def play_a_measure()
    # compute a measure using these variables:
    #    cur_style - a symbol representing style to play (if
    #       this is not your style, do not play)
    #    cur_start_beat - what beat to start on if you are stopped
    #    cur_stop_beat - what beat to stop on if you have started (you can
    #       stop slightly late; generally you should not start any notes 
    #       at or after tm_stop_beat but you can play a short note on 
    #       tm_stop_beat if it is stylistically sensible.)
    #    cur_beats_per_measure - the current time signature as an integer
    #    cur_bps - current beats per second (the vtsched will implement this
    #       but reading the vtsched timemap slope is not reliable because
    #       vtsched may be updated instantaneously after this call.
    #    cur_scale - boolean array representing current scale
    #    cur_chord - boolean array representing current chord
    #    cur_bass - integer representing root of chord
    #
    display "play_a_measure", cur_beats_per_measure, cur_bps
    display "    ", cur_scale, cur_chord, cur_bass
    # Use EPSILON here because comparing floats for equality is not
    #   reliable without very difficult analysis. So, instead of
    #   x >= y, we write x + EPSILON > y
    if cur_style == 'rock'
        # play something using the root of the chord (cur_bass)
        # midi_out.note(0, 24 + cur_bass, vel(100), 1)
        # sched_select(vtsched)
        # sched_cause(1, midi_out, 'note', 0, 24 + 7 + cur_bass, vel(100), 1)
        # sched_cause(2, midi_out, 'note', 0, 24 + cur_bass, vel(100), 1)
        # sched_cause(3, midi_out, 'note', 0, 24 + 7 + cur_bass, vel(100), 1)

        # play notes from the chord
        # for i = 0 to 12
        #     if cur_chord[i]
        #         midi_out.note(0, 48 + i, vel(100), 0.5)

        # pick a random note every 1/16 note (fast). If it's in the
        # scale then play it, otherwise rest. Start on 2nd beat because
        # we play the chord on downbeat and it might be nice to keep
        # chord and "melody" separate so we can hear them clearly in
        # this demo.
        prev_pitch = cur_bass
        for i = 0 to 16 // only 3 beats
            # var pitch = 60 + int(random() * 12)
            var pitch = 60 + pr_markov_next(prev_pitch % 12, get_current_tm().mat)
            if cur_scale[pitch % 12]:
                sched_select(vtsched)
                sched_cause(i * 0.25, midi_out, 'note',
                              0, pitch, vel(100), 0.3)
            prev_pitch = pitch
